# -*- coding: utf-8 -*-
"""
Created on Tue Oct 28 22:42:05 2025

@author: yangshin.liu
"""

import numpy as np
import pandas as pd

# --------- Manual construction of data ---------
# X (radius, mm)
x_vals = [
    -149, -147.979, -146.958, -145.938, -144.917, -143.896, -142.875, -141.854, -140.833, -139.813,
    -138.792, -137.771, -136.75, -135.729, -134.708, -133.688, -132.667, -131.646, -130.625, -129.604,
    -128.583, -127.563, -126.542, -125.521, -124.5, -123.479, -122.458, -121.438, -120.417, -119.396,
    -118.375, -117.354, -116.333, -115.313, -114.292, -113.271, -112.25, -111.229, -110.208, -109.188,
    -108.167, -107.146, -106.125, -105.104, -104.083, -103.063, -102.042, -101.021, -100, -99,
    -94.875, -90.75, -86.625, -82.5, -78.375, -74.25, -70.125, -66, -61.875, -57.75,
    -53.625, -49.5, -45.375, -41.25, -37.125, -33, -28.875, -24.75, -20.625, -16.5,
    -12.375, -8.25, -4.125, 0, 4.125, 8.25, 12.375, 16.5, 20.625, 24.75,
    28.875, 33, 37.125, 41.25, 45.375, 49.5, 53.625, 57.75, 61.875, 66,
    70.125, 74.25, 78.375, 82.5, 86.625, 90.75, 94.875, 99, 100, 101.021,
    102.042, 103.063, 104.083, 105.104, 106.125, 107.146, 108.167, 109.188, 110.208, 111.229,
    112.25, 113.271, 114.292, 115.313, 116.333, 117.354, 118.375, 119.396, 120.417, 121.438,
    122.458, 123.479, 124.5, 125.521, 126.542, 127.563, 128.583, 129.604, 130.625, 131.646,
    132.667, 133.688, 134.708, 135.729, 136.75, 137.771, 138.792, 139.813, 140.833, 141.854,
    142.875, 143.896, 144.917, 145.938, 146.958, 147.979, 149
]

wafer1_polish = [
    7321.41, 6777.72, 6053.62, 5305.58, 4849.33, 4618.73, 4500.21, 4430.22, 4316.41, 4209.27,
    4108.92, 4024.14, 3955.38, 3864.31, 3780.07, 3721.51, 3660.2, 3593.27, 3565.61, 3555.42,
    3533.91, 3543.74, 3527.99, 3542.09, 3550.04, 3561.27, 3572.36, 3587.95, 3601.35, 3626.05,
    3642.56, 3680.16, 3707.68, 3761.06, 3790.92, 3844.62, 3886.63, 3928.64, 3972.73, 3993.69,
    4005.91, 3999.1, 3955.28, 3944.62, 3895.04, 3863.32, 3835.01, 3795.84, 3775.32, 3764.29,
    3732.97, 3716.06, 3733.69, 3717.33, 3695.31, 3640.12, 3581.15, 3572.32, 3565, 3572.09,
    3623.43, 3629.41, 3621.12, 3590.77, 3543.83, 3528.5, 3528.11, 3569.92, 3640.37, 3700.24,
    3730.13, 3742.67, 3724.84, 3730.7, 3712.57, 3713.81, 3683.91, 3660.93, 3609.08, 3545.49,
    3500.62, 3508.77, 3541.55, 3572.91, 3605.07, 3618.65, 3602.28, 3583.73, 3568.4, 3571.73,
    3614.83, 3690.18, 3737.66, 3726.79, 3750.31, 3761.49, 3770.69, 3784.92, 3808.74, 3836.25,
    3865.45, 3876.7, 3921.41, 3964.64, 4001.63, 4024.66, 4009.72, 4006.23, 3978.82, 3950.92,
    3889.56, 3862.63, 3810.98, 3788.61, 3738.52, 3685.46, 3654.64, 3618.2, 3609, 3595.17,
    3567.25, 3534.53, 3534.66, 3538.86, 3527.59, 3539.06, 3532.17, 3562, 3567.12, 3575.43,
    3605.67, 3665.21, 3716.86, 3813.59, 3888.02, 3990.5, 4074.53, 4174.95, 4286.87, 4384.41,
    4482.48, 4609.29, 4775.03, 5224.45, 5950.49, 6784.22, 7567.94
]

wafer2_polish = [
    5952.63, 5497.1, 5062.5, 4700.6, 4502.88, 4437.21, 4382.42, 4363.03, 4281.84, 4188.84,
    4069.63, 3993.31, 3927.43, 3873.33, 3847.94, 3834.69, 3796.98, 3826.46, 3792.47, 3802.96,
    3788.56, 3804.37, 3804, 3822.3, 3852.66, 3860.47, 3862.66, 3915.47, 3924.65, 3945.78,
    3986.52, 4016.33, 4053.35, 4088.97, 4138.93, 4169.4, 4183.39, 4182.78, 4164.83, 4145.83,
    4120.05, 4078.12, 4030.64, 4003.38, 3984.69, 3968.59, 3964.82, 3941.12, 3909.19, 3889.81,
    3883.02, 3877.2, 3872.24, 3850.24, 3843.11, 3790.57, 3713.47, 3650.41, 3652.77, 3650.21,
    3673.48, 3684.65, 3679.63, 3664.65, 3612.63, 3585.75, 3560.16, 3564.57, 3624.67, 3671.33,
    3704.17, 3712.51, 3708.99, 3705.58, 3701.39, 3703.37, 3699.68, 3682.94, 3641.3, 3601.16,
    3574.25, 3589.31, 3637.1, 3675.33, 3709.45, 3736.29, 3734.91, 3675.06, 3686.24, 3697.59,
    3736.15, 3800.46, 3831.46, 3845.16, 3835.72, 3832.76, 3847.02, 3871.64, 3903.5, 3910.06,
    3930.88, 3969.39, 3985.07, 4021.44, 4051.7, 4099.04, 4131.99, 4152.07, 4160.83, 4133.55,
    4150.41, 4115.6, 4119.63, 4075.54, 4046.27, 4005.67, 3993.95, 3965.77, 3930.22, 3882.06,
    3864.75, 3849.32, 3824.35, 3820.27, 3796.96, 3778.16, 3773.97, 3761.35, 3761.53, 3786.72,
    3765.1, 3785.96, 3827.41, 3904.91, 3969.97, 4013.56, 4100.54, 4164.95, 4244.56, 4292.08,
    4336.95, 4379.88, 4464.62, 4784.54, 5172.93, 5461.08, 5519.74
]

wafer3_polish = [
    3481.85, 3611.06, 3903.18, 4082.45, 4141.06, 4146.85, 4127.75, 4104.97, 4099.76, 4074.7,
    4046.16, 4023.8, 3993.82, 3984.18, 3957.06, 3957.49, 3947.5, 3954.96, 3970.65, 3974.98,
    3987.29, 4009.63, 4054.16, 4090.13, 4133.13, 4154.65, 4158.48, 4172.21, 4192.96, 4206.66,
    4191.99, 4201.9, 4196.07, 4197.13, 4190.61, 4170.99, 4152.12, 4143.3, 4133.75, 4092.5,
    4073.77, 4070.24, 4073.91, 4056.59, 4048.04, 4034.38, 4016.52, 4017.05, 4020.28, 4003.82,
    3980.29, 3953.22, 3950.76, 3932.28, 3917.88, 3892.47, 3842.37, 3777.23, 3721.42, 3671.56,
    3742.16, 3779.73, 3766.89, 3726.68, 3643.03, 3583.76, 3549.12, 3555.43, 3577.83, 3609,
    3622.97, 3624.98, 3629.07, 3619.74, 3626.72, 3623.63, 3626.3, 3608.42, 3580.48, 3553.08,
    3568.28, 3611.9, 3679.28, 3750.68, 3785.96, 3786.85, 3763.26, 3728.16, 3734.92, 3789.27,
    3820.12, 3875.32, 3924.47, 3921.01, 3935.16, 3935.36, 3932.87, 3981.55, 3985.29, 3984.38,
    4008.79, 4022.94, 4014.74, 4026.33, 4043.41, 4080.45, 4073.87, 4101.96, 4130.7, 4143.67,
    4176.05, 4188.95, 4203.47, 4199.18, 4189.16, 4207.97, 4192.84, 4168.69, 4168.32, 4156.04,
    4135.11, 4115.94, 4096.12, 4043.58, 4012.51, 3983.47, 3951.19, 3926.98, 3908.78, 3890.03,
    3897.36, 3879.94, 3907.58, 3899.29, 3923.11, 3941.23, 3960.32, 4014.81, 4034.73, 4086.19,
    4142.11, 4183.18, 4230.96, 4216.26, 4104.33, 3838.3, 3664.91
]

# Construct dataframe
df = pd.DataFrame({
    'X(mm)': x_vals,
    'Wafer1 polish': wafer1_polish,
    'Wafer2 polish': wafer2_polish,
    'Wafer3 polish': wafer3_polish
})

# --------- Assign zones ---------
zones = [
    ('A1', 0, 25),
    ('A2', 25, 52),
    ('A3', 52, 78),
    ('A4', 78, 105),
    ('A5', 105, 123),
    ('A6', 123, 133),
    ('A7', 133, 142),
    ('A8', 142, 150)
]

def assign_zone(r):
    abs_r = abs(r)
    for name, start, end in zones:
        if start <= abs_r < end:
            return name
    return None

df['zone'] = df['X(mm)'].apply(assign_zone)

# --------- Zone pressure settings ---------
zone_pressure = {
    'A1': [484, 482, 480],
    'A2': [448, 453, 459],
    'A3': [366, 376, 387],
    'A4': [235, 250, 267],
    'A5': [170, 186, 204],
    'A6': [155, 166, 179],
    'A7': [126, 128, 129],
    'A8': [416, 359, 294]
}

# --------- Calculate tunability (slope m) for each zone ---------
results = []
for zone, _, _ in zones:
    subset = df[df['zone'] == zone]
    means = [
        subset['Wafer1 polish'].mean(),
        subset['Wafer2 polish'].mean(),
        subset['Wafer3 polish'].mean()
    ]
    pressures = np.array(zone_pressure[zone])
    rates = np.array(means)
    # Linear fit (rate vs pressure)
    m, c = np.polyfit(pressures, rates, 1)
    results.append({'zone': zone, 'tunability': m, 'mean_rates': means, 'pressures': pressures})

# --------- Print results ---------
for res in results:
    print(f"Zone {res['zone']}: Tunability (slope) = {res['tunability']:.2f} Ã…/min/hPa, Means = {res['mean_rates']}, Pressures = {res['pressures']}")

